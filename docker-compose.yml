version: '3.8'

services:
  # ===== PRODUCTION SERVICE =====
  mcp-calendly-streaming:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: mcp-calendly-streaming
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Application Settings
      - NODE_ENV=production
      - HTTP_MODE=true
      - PORT=3000
      - LOG_LEVEL=info
      
      # Streaming Configuration
      - MAX_CONNECTIONS=1000
      - HEARTBEAT_INTERVAL=30000
      - CONNECTION_TIMEOUT=60000
      
      # Rate Limiting
      - RATE_LIMIT_REQUESTS_PER_MINUTE=60
      - RATE_LIMIT_BURST=10
      
      # CORS (adjust for your domain)
      - CORS_ORIGINS=https://your-domain.com,http://localhost:3000
      
      # Security (IMPORTANT: Set these in .env file or EasyPanel secrets)
      # - CALENDLY_ACCESS_TOKEN=your_token_here
      # - JWT_SECRET=your_jwt_secret_32_chars_minimum
      # - ENCRYPTION_KEY=your_encryption_key_32_chars
      
    env_file:
      - .env
    volumes:
      # Mount logs directory for persistence
      - ./logs:/app/logs
      # Optional: Mount custom configuration
      # - ./config:/app/config
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
    labels:
      # Traefik labels for reverse proxy (optional)
      - "traefik.enable=true"
      - "traefik.http.routers.mcp-calendly.rule=Host(`your-domain.com`)"
      - "traefik.http.routers.mcp-calendly.entrypoints=websecure"
      - "traefik.http.routers.mcp-calendly.tls.certresolver=letsencrypt"
      - "traefik.http.services.mcp-calendly.loadbalancer.server.port=3000"
      # Docker metadata
      - "com.example.service=mcp-calendly-streaming"
      - "com.example.version=1.0.0"

  # ===== DEVELOPMENT SERVICE =====
  mcp-calendly-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: mcp-calendly-dev
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=debug
      - PORT=3000
      - MAX_CONNECTIONS=100
      - HEARTBEAT_INTERVAL=10000
      - CONNECTION_TIMEOUT=30000
    env_file:
      - .env
    volumes:
      # Mount source code for hot reload
      - ./src:/app/src:ro
      - ./package*.json:/app/
      - ./tsconfig.json:/app/
      # Mount logs
      - ./logs:/app/logs
    networks:
      - mcp-network
    profiles:
      - development
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s

  # ===== MONITORING (OPTIONAL) =====
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - mcp-network
    profiles:
      - monitoring
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - mcp-network
    profiles:
      - monitoring
    restart: unless-stopped

  # ===== REDIS (OPTIONAL FOR CACHING) =====
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - mcp-network
    profiles:
      - caching
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    restart: unless-stopped

# ===== NETWORKS =====
networks:
  mcp-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# ===== VOLUMES =====
volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local

# ===== DEVELOPMENT OVERRIDE =====
# Usage: docker-compose --profile development up mcp-calendly-dev
# Production: docker-compose up mcp-calendly-streaming
# With monitoring: docker-compose --profile monitoring up